import java.util.*;

public class Main {

    // TreeNode definition
    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int val) {
            this.val = val;
        }
    }

    // Solution class to balance BST
    public static class Solution {
        public TreeNode balanceBST(TreeNode root) {
            List<TreeNode> nodes = new ArrayList<>();
            inorderTraversal(root, nodes);
            return buildBalancedBST(nodes, 0, nodes.size() - 1);
        }

        private void inorderTraversal(TreeNode node, List<TreeNode> nodes) {
            if (node == null) return;
            inorderTraversal(node.left, nodes);
            nodes.add(node);
            inorderTraversal(node.right, nodes);
        }

        private TreeNode buildBalancedBST(List<TreeNode> nodes, int start, int end) {
            if (start > end) return null;
            int mid = (start + end) / 2;  // always lower mid
            TreeNode root = nodes.get(mid);
            root.left = buildBalancedBST(nodes, start, mid - 1);
            root.right = buildBalancedBST(nodes, mid + 1, end);
            return root;
        }
    }

    // Manually building the tree from input: [1,null,2,null,3,null,4]
    public static TreeNode buildSkewedTree() {
        TreeNode n1 = new TreeNode(1);
        TreeNode n2 = new TreeNode(2);
        TreeNode n3 = new TreeNode(3);
        TreeNode n4 = new TreeNode(4);

        n1.right = n2;
        n2.right = n3;
        n3.right = n4;

        return n1;
    }

    // Level order traversal to print tree
    public static List<String> printTreeLevelOrder(TreeNode root) {
        List<String> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            TreeNode curr = queue.poll();
            if (curr == null) {
                result.add("null");
                continue;
            }
            result.add(String.valueOf(curr.val));
            queue.offer(curr.left);
            queue.offer(curr.right);
        }

        // Remove trailing nulls
        while (!result.isEmpty() && result.get(result.size() - 1).equals("null")) {
            result.remove(result.size() - 1);
        }

        return result;
    }

    public static void main(String[] args) {
        TreeNode root = buildSkewedTree(); // hardcoded input [1,null,2,null,3,null,4]

        Solution solution = new Solution();
        TreeNode balancedRoot = solution.balanceBST(root);

        List<String> output = printTreeLevelOrder(balancedRoot);
        System.out.println("Output: " + output);
    }
}

